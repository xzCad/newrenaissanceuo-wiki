<?php
/**
 * UO: New Renaissance Status Updater
 * Updates status.json with live data from your ServUO server
 * Run this every minute via cron job or manually
 */

// Your server configuration
$shard_addr = "play.newrenaissanceuo.com";
$shard_port = 2593;
$status_file = "status.json";
$peak_file = "peak_data.txt";

function queryNewRenaissanceServer($shard_addr, $shard_port) {
    echo "Connecting to $shard_addr:$shard_port...\n";
    
    // Open socket connection to ServUO server
    $fp = @fsockopen($shard_addr, $shard_port, $errno, $errstr, 10);
    
    if (!$fp) {
        echo "ERROR: Cannot connect - $errstr ($errno)\n";
        return false;
    }
    
    echo "Connected! Sending status query...\n";
    
    // Send the ServUO status query packet
    fwrite($fp, "\x7f\x00\x00\x01\xf1\x00\x04\xff");
    stream_set_timeout($fp, 5);
    
    // Read the response
    $response = fread($fp, 2000);
    $info = stream_get_meta_data($fp);
    fclose($fp);
    
    if ($info['timed_out']) {
        echo "ERROR: Connection timed out\n";
        return false;
    }
    
    if (empty($response)) {
        echo "ERROR: Empty response from server\n";
        return false;
    }
    
    echo "Raw response received: " . strlen($response) . " bytes\n";
    
    // Parse the response
    $data = explode(',', $response);
    
    if (count($data) < 6) {
        echo "ERROR: Invalid response format - got " . count($data) . " fields\n";
        echo "Response: " . print_r($data, true) . "\n";
        return false;
    }
    
    // Extract data from ServUO response
    $server_name = trim(ltrim(strstr($data[1], '='), '='));
    $age_days = (float)ltrim(strstr($data[2], '='), '=');
    $online_players = (int)ltrim(strstr($data[3], '='), '=');
    $total_items = (int)ltrim(strstr($data[4], '='), '=');
    $total_chars = (int)ltrim(strstr($data[5], '='), '=');
    $memory = trim(ltrim(strstr($data[6], '='), '='));
    
    echo "Parsed data:\n";
    echo "  Server: $server_name\n";
    echo "  Age: $age_days days\n";
    echo "  Players Online: $online_players\n";
    echo "  Total Items: $total_items\n";
    echo "  Total Characters: $total_chars\n";
    echo "  Memory: $memory\n";
    
    return [
        'server_name' => $server_name,
        'age_days' => $age_days,
        'online_players' => $online_players,
        'total_items' => $total_items,
        'total_mobiles' => $total_chars,
        'memory_usage' => $memory
    ];
}

function updateDailyPeak($current_players, $peak_file) {
    $today = date('Y-m-d');
    $peak_data = [];
    
    // Read existing peak data
    if (file_exists($peak_file)) {
        $content = file_get_contents($peak_file);
        $peak_data = json_decode($content, true) ?: [];
    }
    
    // Initialize today's peak if not set
    if (!isset($peak_data[$today])) {
        $peak_data[$today] = 0;
        echo "Initializing today's peak at 0\n";
    }
    
    // Update peak if current is higher
    if ($current_players > $peak_data[$today]) {
        $old_peak = $peak_data[$today];
        $peak_data[$today] = $current_players;
        echo "NEW PEAK! Updated from $old_peak to $current_players\n";
    } else {
        echo "Current peak for today: {$peak_data[$today]}\n";
    }
    
    // Keep only last 30 days of peak data
    $cutoff_date = date('Y-m-d', strtotime('-30 days'));
    $removed_count = 0;
    foreach ($peak_data as $date => $peak) {
        if ($date < $cutoff_date) {
            unset($peak_data[$date]);
            $removed_count++;
        }
    }
    
    if ($removed_count > 0) {
        echo "Cleaned up $removed_count old peak records\n";
    }
    
    // Save updated peak data
    file_put_contents($peak_file, json_encode($peak_data, JSON_PRETTY_PRINT));
    
    return $peak_data[$today];
}

function calculateUptime($age_days) {
    $days = (int)$age_days;
    $hours = (int)(($age_days - $days) * 24);
    return sprintf("%dd %dh", $days, $hours);
}

// Main execution
echo "=== UO: New Renaissance Status Update ===\n";
echo "Time: " . date('Y-m-d H:i:s') . "\n\n";

try {
    $server_data = queryNewRenaissanceServer($shard_addr, $shard_port);
    
    if ($server_data === false) {
        echo "Server appears to be offline or unreachable.\n";
        
        // Keep last known peak but mark as offline
        $existing_data = [];
        if (file_exists($status_file)) {
            $existing_data = json_decode(file_get_contents($status_file), true) ?: [];
        }
        
        $status = [
            "online_players" => 0,
            "peak_players" => $existing_data['peak_players'] ?? 0,
            "total_items" => $existing_data['total_items'] ?? 0,
            "total_mobiles" => $existing_data['total_mobiles'] ?? 0,
            "server_uptime" => "Server Offline",
            "last_updated" => date('Y-m-d H:i:s')
        ];
        
        echo "Marked server as offline in status.json\n";
        
    } else {
        echo "\nServer is ONLINE! Processing data...\n";
        
        // Update peak players
        $peak_today = updateDailyPeak($server_data['online_players'], $peak_file);
        
        // Calculate uptime
        $uptime = calculateUptime($server_data['age_days']);
        
        // Prepare status data for your website
        $status = [
            "online_players" => $server_data['online_players'],
            "peak_players" => $peak_today,
            "total_items" => $server_data['total_items'],
            "total_mobiles" => $server_data['total_mobiles'],
            "server_uptime" => $uptime,
            "last_updated" => date('Y-m-d H:i:s')
        ];
        
        echo "\nFinal status data:\n";
        echo "  Online: {$status['online_players']}\n";
        echo "  Peak Today: {$status['peak_players']}\n";
        echo "  Uptime: {$status['server_uptime']}\n";
    }
    
    // Write updated status to JSON file
    $json_output = json_encode($status, JSON_PRETTY_PRINT);
    if (file_put_contents($status_file, $json_output) !== false) {
        echo "\n✅ status.json updated successfully!\n";
    } else {
        echo "\n❌ ERROR: Could not write to status.json\n";
    }
    
} catch (Exception $e) {
    echo "EXCEPTION: " . $e->getMessage() . "\n";
    
    // Fallback status on error
    $status = [
        "online_players" => 0,
        "peak_players" => 0,
        "total_items" => 0,
        "total_mobiles" => 0,
        "server_uptime" => "Error",
        "last_updated" => date('Y-m-d H:i:s')
    ];
    
    file_put_contents($status_file, json_encode($status, JSON_PRETTY_PRINT));
    echo "Wrote error status to file\n";
}

echo "\n=== Status Update Complete ===\n";
?>